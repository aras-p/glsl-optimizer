attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp ivec4 unity_VertexLightParams;
varying lowp vec4 xlv_COLOR0;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec3 tmpvar_2;
  tmpvar_1 = _glesVertex.xyz;
  tmpvar_2 = _glesNormal;
  highp int j_3;
  highp int il_4;
  mediump vec3 lcolor_5;
  mediump vec3 eyeNormal_6;
  mediump vec4 color_7;
  lowp vec4 tmpvar_8;
  color_7 = vec4(0.0, 0.0, 0.0, 1.1);
  eyeNormal_6 = tmpvar_2;
  lcolor_5 = vec3(0.0, 0.0, 0.0);
  il_4 = 0;
  while (true) {
    highp float tmpvar_9;
    tmpvar_9 = min (8.0, float(unity_VertexLightParams.x));
    if ((float(il_4) >= tmpvar_9)) {
      break;
    };
    highp vec3 tmpvar_10;
    tmpvar_10 = unity_LightPosition[il_4].xyz;
    mediump vec3 dirToLight_11;
    dirToLight_11 = tmpvar_10;
    lcolor_5 = (lcolor_5 + min ((
      (max (dot (eyeNormal_6, dirToLight_11), 0.0) * unity_LightColor[il_4].xyz)
     * 0.5), vec3(1.0, 1.0, 1.0)));
    il_4++;
  };
  color_7.xyz = lcolor_5;
  j_3 = 0;
  while (true) {
    highp float tmpvar_12;
    tmpvar_12 = min (float(unity_VertexLightParams.y), 4.0);
    if ((j_3 >= int(tmpvar_12))) {
      break;
    };
    color_7.xyz = (color_7.xyz + unity_LightColor[j_3].xyz);
    j_3++;
  };
  tmpvar_8 = color_7;
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_1;
  xlv_COLOR0 = tmpvar_8;
  gl_Position = tmpvar_13;
}


// stats: 22 alu 0 tex 4 flow
// inputs: 2
//  #0: _glesVertex (high float) 4x1 [-1]
//  #1: _glesNormal (high float) 3x1 [-1]
// uniforms: 3 (total size: 0)
//  #0: unity_LightColor (medium float) 4x1 [8]
//  #1: unity_LightPosition (high float) 4x1 [8]
//  #2: unity_VertexLightParams (high int) 4x1 [-1]
