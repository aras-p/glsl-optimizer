varying lowp vec4 xlv_TEXCOORD1;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_SV_POSITION;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 _World2Object;
uniform highp float _VerticalBillboarding;
uniform highp float _TimeOnDuration;
uniform highp float _TimeOffDuration;
uniform highp vec4 _Time;
uniform highp float _SizeGrowStartDist;
uniform highp float _SizeGrowEndDist;
uniform highp float _NoiseAmount;
uniform highp float _Multiplier;
uniform highp float _MaxGrowSize;
uniform highp float _FadeOutDistNear;
uniform highp float _FadeOutDistFar;
uniform highp vec4 _Color;
uniform highp float _BlinkingTimeOffsScale;
uniform highp float _Bias;
attribute lowp vec4 _glesColor;
attribute highp vec4 _glesMultiTexCoord1;
attribute highp vec4 _glesMultiTexCoord0;
attribute mediump vec3 _glesNormal;
attribute highp vec4 _glesVertex;
void main ()
{
  highp vec3 tmpvar_1;
  highp vec4 tmpvar_2;
  tmpvar_1 = _glesNormal;
  tmpvar_2 = _glesColor;
  lowp vec4 tmpvar_3;
  highp vec3 localDir_4;
  highp vec3 tmpvar_5;
  tmpvar_5.z = 0.00000;
  tmpvar_5.xy = (vec2(0.500000, 0.500000) - tmpvar_2.xy);
  highp vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 * _glesMultiTexCoord1.xyy);
  highp vec3 tmpvar_7;
  tmpvar_7 = (_glesVertex.xyz + tmpvar_6);
  highp vec4 tmpvar_8;
  tmpvar_8.w = 1.00000;
  tmpvar_8.xyz = _WorldSpaceCameraPos;
  highp vec3 tmpvar_9;
  tmpvar_9 = ((_World2Object * tmpvar_8).xyz - tmpvar_7);
  localDir_4 = tmpvar_9;
  localDir_4.y = mix (0.00000, tmpvar_9.y, _VerticalBillboarding);
  highp float tmpvar_10;
  tmpvar_10 = length (localDir_4);
  highp vec3 dir_11;
  dir_11 = (localDir_4 / tmpvar_10);
  highp float tmpvar_12;
  tmpvar_12 = abs (dir_11.y);
  vec3 tmpvar_13;
  if ((tmpvar_12 > 0.999000)) {
    tmpvar_13 = vec3(0.00000, 0.00000, 1.00000);
  } else {
    tmpvar_13 = vec3(0.00000, 1.00000, 0.00000);
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize (cross (tmpvar_13, dir_11));
  highp vec3 tmpvar_15;
  tmpvar_15 = cross (dir_11, tmpvar_14);
  highp float tmpvar_16;
  tmpvar_16 = min ((max ((tmpvar_10 - _SizeGrowStartDist), 0.00000) / _SizeGrowEndDist), 1.00000);
  highp vec3 tmpvar_17;
  tmpvar_17 = ((tmpvar_7 - ((tmpvar_14 * tmpvar_6.x) + (tmpvar_15 * tmpvar_6.y))) + (((tmpvar_14 * tmpvar_1.x) + (tmpvar_15 * tmpvar_1.y)) * (((tmpvar_16 * tmpvar_16) * _MaxGrowSize) * tmpvar_2.w)));
  highp float tmpvar_18;
  tmpvar_18 = (_Time.y + (_BlinkingTimeOffsScale * tmpvar_2.z));
  highp float y_19;
  y_19 = (_TimeOnDuration + _TimeOffDuration);
  float tmpvar_20;
  tmpvar_20 = (tmpvar_18 / y_19);
  float tmpvar_21;
  tmpvar_21 = (fract (abs (tmpvar_20)) * y_19);
  float tmpvar_22;
  if ((tmpvar_20 >= 0.00000)) {
    tmpvar_22 = tmpvar_21;
  } else {
    tmpvar_22 = -(tmpvar_21);
  };
  highp float tmpvar_23;
  tmpvar_23 = (smoothstep (0.00000, (_TimeOnDuration * 0.250000), tmpvar_22) * (1.00000 - smoothstep ((_TimeOnDuration * 0.750000), _TimeOnDuration, tmpvar_22)));
  highp float tmpvar_24;
  tmpvar_24 = (tmpvar_18 * (6.28319 / _TimeOnDuration));
  highp float tmpvar_25;
  tmpvar_25 = ((_NoiseAmount * (sin (tmpvar_24) * ((0.500000 * cos (((tmpvar_24 * 0.636600) + 56.7272))) + 0.500000))) + (1.00000 - _NoiseAmount));
  highp float tmpvar_26;
  if ((_NoiseAmount < 0.0100000)) {
    tmpvar_26 = tmpvar_23;
  } else {
    tmpvar_26 = tmpvar_25;
  };
  highp vec4 tmpvar_27;
  tmpvar_27.w = 1.00000;
  tmpvar_27.xyz = tmpvar_17;
  highp float tmpvar_28;
  tmpvar_28 = clamp ((tmpvar_10 / _FadeOutDistNear), 0.00000, 1.00000);
  float tmpvar_29;
  tmpvar_29 = (1.00000 - clamp ((max ((tmpvar_10 - _FadeOutDistFar), 0.00000) * 0.200000), 0.00000, 1.00000));
  highp float tmpvar_30;
  tmpvar_30 = (tmpvar_28 * tmpvar_28);
  highp vec4 tmpvar_31;
  tmpvar_31 = (((((tmpvar_30 * tmpvar_30) * (tmpvar_29 * tmpvar_29)) * _Color) * _Multiplier) * (tmpvar_26 + _Bias));
  tmpvar_3 = tmpvar_31;
  xlv_SV_POSITION = (glstate_matrix_mvp * tmpvar_27);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
  xlv_TEXCOORD1 = tmpvar_3;
}

